1. https://www.bsidesoft.com/?p=4074 에서 값, 식, 문 정리하기
    1.1. 시작하며...
        - 단어를 정복하라는 언급은 '개발'에만 국한되지 않는다고 생각함.
        - 일반적으로 쓰는 단어와 그 분야에서 사용하는 단어의 뜻이 다름.
        - 특정 분야에서 사용하는 단어의 의미를 알면 그에 대한 지식을 얻는 것임.

    1.2. Lexical Grammer
        ; 구체적인 문법을 정의하기 이전에 그 문법을 구성하는 기본 요소들을 정의해 준 것.

        1.2.1. javascript
            - Control Characters (제어문자) : 눈에 보이지 않지만 여러가지 제어를 위해 삽입되는 문자.
            - White Space (공백) : 띄어쓰기를 컴퓨터가 인식하게 하는 문자.
            - Line terminators (줄바꿈) : 컴퓨터가 줄바꿈을 인식할 수 있게하는 문자.
            - Comments (주석) : 번역기가 코드를 low level 언어로 해석하지 않는 부분
            - Keywords (키워드) : 예약어, 약속어를 칭함. 해석기가 만나면 키워드에 미리 지정된 방식으로 내용을 인식한다.
            - Literal (리터럴) : 더 이상 나눌 수 없는 값을 표현.  ex) 3, '3' 등

    1.3. Statement & Expression
        1.3.1. Statement (문)
            - 인터프리터에게 내리는 '지시명령'. 어떤 동작을 해야되는지 keyword를 통해 알게된다.
            - Expression은 값으로 수렴하기 때문에 return할 수 있지만 Statement는 파싱된 이후 아무것도 남지 않기에 return 할 수 없다.
            - '지시명령'의 구조
                - 구조물 생성하는 명령 
                    ***javascript는 구조물을 생성하는 명령이 존재하지 않음.
                       참조 : http://www.bsidesoft.com/?cat=21
                - 흐름제어 명령
                    - 제어문(control statement), routine(반복문)
                        //제어문(프로그램의 흐름을 바꾸는 제어문. 종류 엄청많음)
                        if(...){...} if else(...){....},
                        switch(...){..}
                        for(...){...}
                        ...

            - '지시명령'의 형태
                - empty statement : 공문(빈문)
                    //공문
                    ;;;;;;; //아무것도 없는 공문들의 집합...
                    while(...); //while에 공문

                - block statement : 중문({}) 
                    //단문(1개짜리 문)
                    var ... = ..;

                    //중문(=단문 여러개를 {}로 묶은것)
                    if(...){
                        문1;
                        문2;
                    }

                - expression statement : 식문
                    //식문(값인 것 같지만, 자바스크립트는 식문이라고 해서 문으로 인정함)
                    3+3;
                    'aaa';

                - (variable) declare statement : (변수)선언문
                    //변수 선언문
                    var i;
                    let es6let; //ES6 문법
                    const es6const = 3; //ES6 문법
        1.3.2. Expression (식, 표현식)
            - 어떠한 값을 갖는(수렴하는) 것을 말함
                ***값은 primitive, reference로 나뉜다.
            - Statement와 다르게 return 할 수 있다.

            - Expression 의 형태
                - 값 식 : 값 자체도 식으로 인정. 다음과 같은 코드는 전부 올바른 값 식
                    3 //숫자 ok!
                    'test' //문자 ok!
                    {a:3} //객체 ok!
                    undefined //undefined ok!
                    null //null ok!

                - 연산식 : 연산자가 포함된 경우 결과는 반드시 하나의 값이 되어 최종적으로 값 식.
                    1+3 //4 값 수렴 ok!
                    5 > 3 // true 값  수렴 ok!
                    
                - 리터럴 : 리터럴은 대부분 객체 생성을 위한 일종의 매크로. 리터럴의 결과는 참조값.
                    {} //오브젝트리터럴
                    function(){} //함수리터럴
                    [] //배열리터럴
                    /abc/ //정규식리터럴

                - 함수호출 : 함수를 호출한 결과는 값. 자바는 void를 반환하면 값이 될 수 없습니다만 자바스크립트는 명시적으로 반환하지 않아도 undefined 가 반환되어 언제나 값으로 수렴.
            
            - Expression 연관 주제
                - 기본값과 래퍼객체 (참조한 내용 복사 - https://www.bsidesoft.com/?p=760)
                    기본형, 기본자료형, 기본값 등으로 불리는데 영어로는 primative 라 합니다. 저는 그 중 기본값이란 단어로 설명하겠습니다.
                    다른 언어와 마찬가지로 자바스크립트에서도 기본값이란 참조되지 않고 복제되며 immutable[3. 한번 정의되면 변화시킬 수 없는 상태를 갖는 것] 한 자료형(data type)이란 뜻입니다. 이에 해당되는 것으로 string, number, boolean, undefined, null, NaN 이 있지만, 의외로 많은 브라우저가 null 이나 undefined 를 오브젝트로 만들어 참조가 되도록 잘못 설계한 오류가 있습니다. 이 오류 때문에 브라우저에 따라 아래와 같은 말도 안되는 상황도 벌어집니다.

                    undefined = 3;
                    if( undefined === 3 ) alert( 'ok' ); //ok!
                    쨌든 위에 열거한 자료형을 사용하면 참조되지 않고 복제되며 복제불가능하게 되는 것이 기본입니다만 각 기본값은 대응되는 객체래퍼클래스가 존재합니다.

                    만약 이를 이용하여 생성한 경우는 객체가 되기 때문에 복제가 아닌 참조로 작동하게 됩니다.

                    var a = "test"; //기본값으로 작동!
                    alert( typeof a ); // 'string'

                    var b = new String( "test" ); //참조값으로 작동!
                    alert( typeof b ); //'object'
                    사실 String 객체의 많은 메서드는 무조건 새로운 문자열을 보내기 때문에 설령 b를 함수의 인자로 보낸다고 해도 b 자체가 변경될 가능성은 매우 희박합니다만, typeof 에서 문제가 발생하거나 문자열로 사용시 toString을 추가로 호출하는 오버해드가 발생합니다.

                    왜 아런 불편하기만 한 래퍼객체가 존재할까요? 그것은 객체로서 다양한 메서드를 이용할 수 있기 때문입니다.

                    view sourceprint?
                    var a = new String( "test" );
                    alert( a.charAt(0) ); //t
                    alert( a.length ); //4
                    그런데 래퍼객체가 아니라도 아래와 같이 기본값형태에서 메서드를 쓸 수 있습니다.

                    var a = "test";
                    alert( a.charAt(0) ); //t
                    이건 어찌된 일인가 보면 현대 대부분의 언어가 지원하는 박싱이란 기능입니다. 즉 아래와 같은 일이 일어납니다.

                    var a= "test";

                    temp = new String( a );
                    alert( temp.charAt(0) );
                    temp = null;
                    박싱이란 결국 개발자를 위해 사용하기 편하게 만들어준 매크로 기능입니다. 박싱의 경우 래퍼객체를 직접 사용하면 개발자가 완전히 코드로 통제할 수 있습니다만 c로 된 인터프리터가 하기 때문에 박싱이 훨씬 빠릅니다. 하지만 박싱할 때마다 임시객체가 만들어지는 것은 엄연한 사실입니다.
                    아래 코드는 별 생각없이 쓸 수도 있습니다.

                    var a = "test";

                    var b = a.length + ":" +
                    a.charAt(0) + ":" +
                    a.charAt(1) + ":" +
                    a.charAt(2) +":"+
                    a.char(3);
                    하지만 박싱처리되므로 내부 사정은 다음과 같을 것입니다.

                    var a = "test";

                    t1 = new String( a );
                    t2 = new String( a );
                    t3 = new String( a );
                    t4 = new String( a );
                    t5 = new String( a );

                    var b = t1.length + ":" +
                    t2.charAt(0) + ":" +
                    t3.charAt(1) + ":" +
                    t4.charAt(2) +":"+
                    t5.char(3);

                    t1 = null;
                    t2 = null;
                    t3 = null;
                    t4 = null;
                    t5 = null;
                    래퍼객체를 생성하고 사용하는 것보다는 박싱문법이 빠르지만, 객체를 만들고 가비지컬렉팅의 부하를 늘리는데는 변함없습니다. 브라우저 구현에 따라 임시객체를 키로 저장했다가 delete 시키는 경우는 그나마 즉시 메모리에서 해지되지만 위와 같이 null을 할당하는 구현에서는 과도한 가비지컬렉팅 부하를 걸기도 합니다.

                    따라서 레퍼 메소드 사용 빈도에 따라 직접 래퍼객체를 생성하는 편이 유리한 경우도 많습니다.

                    var a = new String("test");
                    var b = a.length + ":" +
                    a.charAt(0) + ":" +
                    a.charAt(1) + ":" +
                    a.charAt(2) +":"+
                    a.char(3);
                    a = null;
                    이러한 방식의 문제는 번잡하고 객체를 직접 관리해야 한다는 점입니다. 또한 최신 브라우저 중에는 박싱을 자바스크립트 머신 위가 아닌 c의 인터프리터층에서 처리하는 최적화를 도입한 경우도 있습니다.

                    하지만 구형 브라우저의 경우 단지 b에 한 번 할당하는 수준이 아니라, for로 대규모 처리된다던가 하면 성능이 크게 차이나게 됩니다.

                    ECMA표준은 모든 메서드를 정적으로 쓸 수 있게 규정하고 있습니다만, 실제 구현여부는 브라우저마다 차이가 심합니다.

                    var a = "test";

                    var b = a.length + ":" + //속성은 안되고!
                    String.charAt(a, 0) + ":" + //첫번째인자가 대상
                    String.substr(a, 1); //est
                    각 기본값에 대응하는 함수는 Boolean, Number, String 입니다. 자바스크립트에서 박싱은 숫자, 불린, 문자열에 전부 작동됩니다.

                    alert( 3.57.toFixed(1) );// 3.5
                    alert( true.toString() ); //"true"문자열


                - 참조값과 (참조한 내용 복사 - https://www.bsidesoft.com/?p=760)
                    참조값의 특징은 1복제되지 읺고, 2원본은 하나만 유지된 상태로, 3주소만 공유되는 것입니다. 자바스크립트에서는 위에서 언급한 6가지 기본값을 제외한 모든 것이 참조값입니다. 구분하기는 쉽죠.

                    참조값의 주요한 문제는 가비지컬렉팅입니다.다음과 같은 코드를 고려해보죠.
                    
                    var a = b= {key:'test'};
                    동일한 객체에 대한 참조를 두 변수가 갖고 있습니다. 이중 한 쪽이 참조를 풀어줍니다.
                    
                    var a = b= {key:'test'};
                    
                    a = null;
                    하지만 여전히 남은 하나(b)가 참조를 쥐고 있습니다. b도 해지 합나다만 이번엔 null 이 아니라 다른 참조를 넣어 해지해 봅니다.
                    
                    var a = b = {key:'test'};
                    
                    a = null;
                    b = {};
                    이제서야 최초 생성된 {key:’test’} 는 가비지컬렉팅 됩니다. 별거 아닌 이것이 참조변수 관리입니다만 이 별것 아닌걸 잘 못해서 가비지컬렉팅 되지 못한 객체들이 메모리를 잠식해 브라우저가 점점 느려지는 원인이 됩니다.
                    
                    실제 객체가 참조되는 속성 때문에 함수의 인자 등으로 전달되면 원본이 훼손될 수 있습니다. c나 자바는 이를 막는 별도의 문법을 도입했습니다(final, const 등)
                    
                    하지만 자바스크립트는 이를 통제할 방법이 없으므로 개발자의 의중을 파악하기 힘들고 오류의 원인이 됩니다.
                    
                    var a = [3, 4, 5];
                    
                    function test( arr ){
                      arr[0]++; //원본이 훼손되었다!
                      return arr[0] + arr[1];
                    }
                    
                    test( a ); // (3+1=4) + 4 = 8
                    test( a ); // (4+1=5) + 4 = 9
                    언어가 지원하지 않기 때문에 명시적으로 final 이란 메서드를 구상해두는 것도 나쁘지 않은 아이디어입니다. 변경불가를 걸 방법은 없으므로 대안으로 복제본을 넘겨보죠.
                    
                    view sourceprint?
                    Array.prototype.final = Array.prototype.concat; //복제본을 넘긴다!
                    
                    var a = [3, 4, 5];
                    
                    function test( arr ){
                      arr[0]++; //복제본을 훼손할뿐..
                      return arr[0] + arr[1];
                    }
                    
                    test( a.final() ); // (3+1=4) + 4 = 8
                    test( a.final() ); // (3+1=5) + 4 = 8
                    요점은 자바스크립트에서는 개발자가 코드를 보고 인자가 객체로 주어질 경우 변경가능성이 있는지 아닌지를 코드로 표현할 수 있는 방안을 직접 강구해야한다는 점입니다 =.=;

                - 연산자, 연산지연
                    ***참조(연산자) : https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators
                    ***참조(연산지연) : https://www.bsidesoft.com/?p=773